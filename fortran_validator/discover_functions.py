#!/usr/bin/env python3
"""
Function Discovery Script for Zero-Maintenance Validator

This script automatically discovers modernized functions and generates
the necessary include files for the validator.
"""

import os
import glob
import re
from pathlib import Path

def discover_modern_functions(modern_dir):
    """Discover all modernized functions from module files."""
    functions = []
    module_files = glob.glob(os.path.join(modern_dir, "*_module.f90"))
    
    for module_file in sorted(module_files):
        # Extract function name from filename (e.g., pythag_module.f90 -> pythag)
        basename = os.path.basename(module_file)
        match = re.match(r"(.+)_module\.f90$", basename)
        if match:
            func_name = match.group(1)
            functions.append(func_name)
    
    return functions

def check_f77_exists(src_dir, func_name):
    """Check if corresponding F77 source exists."""
    f77_path = os.path.join(src_dir, f"{func_name}.f")
    return os.path.exists(f77_path)

def check_validation_exists(validator_dir, func_name):
    """Check if validation include file exists."""
    inc_path = os.path.join(validator_dir, f"{func_name}_validation_mega.inc")
    return os.path.exists(inc_path)

def get_dependency_functions():
    """Return list of known dependency functions for error handling."""
    return ['xermsg', 'ivout', 'j4save', 'xercnt', 'xerhlt', 'xerprn', 'xersve', 'xgetua']

def generate_functions_inc(functions, src_dir, validator_dir):
    """Generate the functions.inc file with USE statements only."""
    content = []
    
    # Header
    content.append("! Automatically generated by discover_functions.py")
    content.append("! DO NOT EDIT MANUALLY")
    content.append("")
    
    # USE statements for modern modules
    content.append("    ! Modern function modules")
    for func in functions:
        content.append(f"    use {func}_module, only: {func}_modern => {func}")
    
    return '\n'.join(content)

def generate_functions_routines_inc(functions, src_dir, validator_dir):
    """Generate the functions_routines.inc file with subroutines."""
    content = []
    
    # Header
    content.append("! Automatically generated by discover_functions.py")
    content.append("! DO NOT EDIT MANUALLY")
    content.append("")
    
    # Registration subroutine
    content.append("    subroutine register_discovered_functions()")
    content.append("        ! Register which modern implementations are available")
    for func in functions:
        content.append(f"        call register_modern('{func.upper()}', .true.)")
    content.append("    end subroutine register_discovered_functions")
    content.append("")
    
    # Validation dispatch subroutine
    content.append("    subroutine dispatch_validation(func_name)")
    content.append("        character(len=*), intent(in) :: func_name")
    content.append("        character(len=20) :: func_upper")
    content.append("")
    content.append("        func_upper = func_name")
    content.append("        call to_upper(func_upper)")
    content.append("")
    content.append("        select case(trim(func_upper))")
    
    # Add cases for functions with validation includes
    for func in functions:
        if check_validation_exists(validator_dir, func):
            content.append(f"            case('{func.upper()}')")
            content.append(f"                call validate_{func}()")
    
    content.append("            case default")
    content.append("                call validate_generic(func_name)")
    content.append("        end select")
    content.append("    end subroutine dispatch_validation")
    
    return '\n'.join(content)

def generate_makefile_functions(functions, src_dir):
    """Generate makefile variable definitions for discovered functions."""
    content = []
    
    # Header
    content.append("# Automatically generated by discover_functions.py")
    content.append("# DO NOT EDIT MANUALLY")
    content.append("")
    
    # Main function list
    valid_functions = [f for f in functions if check_f77_exists(src_dir, f)]
    content.append("DISCOVERED_FUNCTIONS = " + " ".join(valid_functions))
    content.append("")
    
    # Add dependency functions
    dep_funcs = get_dependency_functions()
    content.append("DEPENDENCY_FUNCTIONS = " + " ".join(dep_funcs))
    content.append("")
    
    # Combined list
    content.append("ALL_TESTED_FUNCTIONS = $(DISCOVERED_FUNCTIONS) $(DEPENDENCY_FUNCTIONS)")
    
    return '\n'.join(content)

def generate_validation_includes(functions, validator_dir):
    """Generate include directives for validation routines."""
    content = []
    
    content.append("! Include validation routines")
    for func in functions:
        if check_validation_exists(validator_dir, func):
            content.append(f"    include '{func}_validation_mega.inc'")
    
    return '\n'.join(content)

def main():
    # Directories
    script_dir = os.path.dirname(os.path.abspath(__file__))
    parent_dir = os.path.dirname(script_dir)
    modern_dir = os.path.join(parent_dir, "modern")
    src_dir = os.path.join(parent_dir, "src")
    
    # Discover functions
    print("Discovering modernized functions...")
    functions = discover_modern_functions(modern_dir)
    print(f"Found {len(functions)} modernized functions: {', '.join(functions)}")
    
    # Generate functions.inc
    functions_inc_content = generate_functions_inc(functions, src_dir, script_dir)
    functions_inc_path = os.path.join(script_dir, "functions.inc")
    with open(functions_inc_path, 'w') as f:
        f.write(functions_inc_content)
    print(f"Generated {functions_inc_path}")
    
    # Generate functions_routines.inc
    functions_routines_content = generate_functions_routines_inc(functions, src_dir, script_dir)
    functions_routines_path = os.path.join(script_dir, "functions_routines.inc")
    with open(functions_routines_path, 'w') as f:
        f.write(functions_routines_content)
    print(f"Generated {functions_routines_path}")
    
    # Generate makefile functions
    makefile_content = generate_makefile_functions(functions, src_dir)
    makefile_funcs_path = os.path.join(script_dir, "functions.mk")
    with open(makefile_funcs_path, 'w') as f:
        f.write(makefile_content)
    print(f"Generated {makefile_funcs_path}")
    
    # Generate validation includes
    validation_inc_content = generate_validation_includes(functions, script_dir)
    validation_inc_path = os.path.join(script_dir, "validation_includes.inc")
    with open(validation_inc_path, 'w') as f:
        f.write(validation_inc_content)
    print(f"Generated {validation_inc_path}")

if __name__ == "__main__":
    main()